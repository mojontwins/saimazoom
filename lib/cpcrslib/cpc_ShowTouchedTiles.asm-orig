; ******************************************************
; **       Librería de rutinas para Amstrad CPC       **
; **	   Raúl Simarro, 	  Artaburu 2007           **
; ******************************************************

; Cambio radical al tema de los tiles tocados marca ACME (Actualización de 
; Código Mojona Eructo) by na_th_an

; Ahora en lugar de haber una lista de tiles tocados, tenemos un bitfield. El
; bitfield se ubica a partir de `tiles_tocados` y ocupa 96 bytes, con 1 bit 
; para cada uno de las 768 casillas.

; Ahora no se recorrerá una lista de parejas X, Y, sino que debe recorrerse el
; bitfield y ejecutarse la rutina de actualización para cada bit a 1.

INCLUDE "CPCconfig.def"

XLIB cpc_ShowTouchedTiles

XREF tiles_tocados

XREF posiciones_super_buffer
XREF posiciones_pantalla

XREF posicion_inicial_area_visible
XREF posicion_inicial_superbuffer
XREF ancho_pantalla_bytes
XREF alto_pantalla_bytes

IF PASARPORDETRAS
	XREF behindtilemasks
	XREF pantalla_juego				; Buffer pantalla

	ld  ix, pantalla_juego
ENDIF

.cpc_ShowTouchedTiles

	ld  hl,tiles_tocados
	ld  b, 96
	ld  de, 0 			; (x, y) = (0, 0)

.bucle_cpc_ShowTouchedTiles	
	; Unrolled
	ld  a, (hl)
	or  a
	jr  nz, process

	ld  a, e
	add 8
	ld  e, a
	jr skipall

.process

	push bc
	push hl

	; A contains a bitfield

	bit 0, a
	jr  z, bit0_skip
	call copyTile
.bit0_skip
	inc e

	bit 1, a
	jr  z, bit1_skip	
	call copyTile
.bit1_skip
	inc e

	bit 2, a
	jr  z, bit2_skip	
	call copyTile
.bit2_skip
	inc e

	bit 3, a
	jr  z, bit3_skip	
	call copyTile
.bit3_skip
	inc e

	bit 4, a
	jr  z, bit4_skip	
	call copyTile
.bit4_skip
	inc e

	bit 5, a
	jr  z, bit5_skip	
	call copyTile
.bit5_skip
	inc e

	bit 6, a
	jr  z, bit6_skip	
	call copyTile
.bit6_skip
	inc e

	bit 7, a
	jr  z, bit7_skip
	call copyTile
.bit7_skip
	inc e

	pop hl
	pop bc

.skipall
	ld  a, e
	cp  32
	jr  nz, noincd

	inc d
	ld  e, 0

.noincd
	inc hl

	djnz bucle_cpc_ShowTouchedTiles
	ret

IF PASARPORDETRAS
.ntPtr
	defw 0
ENDIF

.copyTile
	; copia el tile en (x, y) = E, D.

	push de

.posicionar_superbuffer
	; Superbuffer is 64 bytes per row*8
	; Position is sb + 512*D + 2*E
	
	sla d 						; need this later
	sla e
	ld  hl, posicion_inicial_superbuffer
	add hl, de
	; HL -> posición en superbuffer


	PUSH HL 					; Guardamos HL.

.posicionar_pantalla
	; Buscamos la dirección de pantalla

	LD C,D						; Remember, D = Y*2
	LD B,0 						; BC = Y*2
	LD HL,posiciones_pantalla
	ADD HL,BC

	LD C,(HL)
	INC HL
	LD B,(HL)	 				; BC -> fila de tiles en pantalla

	LD L,e
	LD H,0						; HL = X*2
	ADD HL,BC 					; HL -> posición en pantalla
	
.transf_bloque_sb_pantalla
	POP DE 						; Sacamos posición en superbuffer a DE

	; Unrolled
	ex de, hl 					; de->pantalla, hl->buffer

	ldi
	ldi
	ld  bc, 62
	add hl, bc
	ex  de, hl
	ld  bc, $07fe
	add hl, bc
	ex  de, hl

	ldi
	ldi
	ld  bc, 62
	add hl, bc
	ex  de, hl
	ld  bc, $07fe
	add hl, bc
	ex  de, hl

	ldi
	ldi
	ld  bc, 62
	add hl, bc
	ex  de, hl
	ld  bc, $07fe
	add hl, bc
	ex  de, hl
	; 16+16+10+11+4+10+11+4=82

	ldi
	ldi
	ld  bc, 62
	add hl, bc
	ex  de, hl
	ld  bc, $07fe
	add hl, bc
	ex  de, hl

	ldi
	ldi
	ld  bc, 62
	add hl, bc
	ex  de, hl
	ld  bc, $07fe
	add hl, bc
	ex  de, hl

	ldi
	ldi
	ld  bc, 62
	add hl, bc
	ex  de, hl
	ld  bc, $07fe
	add hl, bc
	ex  de, hl

	ldi
	ldi
	ld  bc, 62
	add hl, bc
	ex  de, hl
	ld  bc, $07fe
	add hl, bc
	ex  de, hl

	ldi
	ldi

	pop de

	ret